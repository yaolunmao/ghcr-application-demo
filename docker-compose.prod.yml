# ===================================================
# =         生产环境 (Production) Compose 文件        =
# =      此文件部署在真实服务器上，从GHCR拉取镜像      =
# ===================================================

services:
  # 1. 前端 Nginx 服务
  ghcr-application-vue3:
    # 不再使用 build，而是直接从镜像仓库拉取镜像
    image: ghcr.io/yaolunmao/ghcr-application-demo/ghcr-application-vue3:v1.0.2
    container_name: ghcr-application-vue3-prod # 修改容器名
    restart: always
    ports:
      - "80:80" # 映射到标准的 HTTP 80 端口
      - "443:443" # SSL
    volumes:
      # 共享 Let's Encrypt 的证书目录 (只读)
      - ./certbot/conf:/etc/letsencrypt:ro
      # 共享 Let's Encrypt 的验证文件目录
      - ./certbot/www:/var/www/certbot
    depends_on:
      - ghcr-application-fastify
    # 注意：生产环境的前端服务不需要 env_file，因为变量在构建时已注入

  # 2. 后端 Fastify 服务
  ghcr-application-fastify:
    # 不再使用 build，而是直接从镜像仓库拉取镜像
    image: ghcr.io/yaolunmao/ghcr-application-demo/ghcr-application-fastify:v1.0.2
    container_name: ghcr-application-fastify-prod # 修改容器名
    restart: always
    # 变化3：移除了 ports 块，不再暴露后端端口
    env_file:
      - .env.pro # 使用生产环境的配置文件
    environment:
      - DB_HOST=ghcr-application-mysql
    depends_on:
      ghcr-application-mysql:
        condition: service_healthy

  # 3. MySQL 数据库服务
  ghcr-application-mysql:
    image: mysql:8.0.41 # 保持官方镜像
    container_name: ghcr-application-mysql-prod # 变化1：修改容器名
    restart: always
    # 移除了 ports 块，不再暴露数据库端口
    env_file:
      - .env.pro # 使用生产环境的配置文件
    volumes:
      - mysql-prod-data:/var/lib/mysql # 使用独立的生产数据卷
    healthcheck:
      test:
        ["CMD-SHELL", "mysqladmin ping -h localhost -p$$MYSQL_ROOT_PASSWORD"]
      interval: 15s
      timeout: 10s
      retries: 60

  # 4. Certbot 服务（用于自动化SSL证书管理）
  ghcr-application-certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
# 定义生产环境专用的数据卷
volumes:
  mysql-prod-data:
