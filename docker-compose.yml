services:
  # 后端 Fastify 服务
  ghcr-application-fastify:
    image: ghcr-application/fastify:dev  # <-- 添加此行
    build:
      context: ./ghcr-application-fastify # 构建上下文目录
      dockerfile: Dockerfile.dev # 使用开发环境的 Dockerfile
    container_name: ghcr-application-fastify-dev # 容器名
    ports:
      - '5174:3000' # 将容器的3000端口映射到主机的5174端口
    volumes:
      - ./ghcr-application-fastify:/app # 将整个后端项目挂载到容器中，实现代码热更新
      - /app/node_modules # 匿名卷，防止主机的node_modules覆盖容器内的
      # 如果需要，也可以挂载其他目录
    env_file:
      - .env.dev
    environment:     # 我们保留这个 environment 块，用于定义那些不是来自 .env 文件的变量
      - DB_HOST=ghcr-application-mysql # 这个变量是跟Docker网络结构相关的，放在这里很合适
    depends_on:
      ghcr-application-mysql:
        condition: service_healthy
  # 前端 Vue3 服务
  ghcr-application-vue3:
    image: ghcr-application/vue3:dev  # <-- 添加此行
    build:
      context: ./ghcr-application-vue3 # 构建上下文目录
      dockerfile: Dockerfile.dev # 使用开发环境的 Dockerfile
    container_name: ghcr-application-vue3-dev # 容器名
    ports:
      - '5173:5173' # 将容器的5173端口映射到主机的5173端口
    volumes:
      - ./ghcr-application-vue3:/app # 将整个前端项目挂载进去
      - /app/node_modules # 匿名卷，防止主机的node_modules覆盖容器内的
    depends_on:
      - ghcr-application-fastify # 确保后端服务先于前端启动
  # MySQL 数据库服务
  ghcr-application-mysql:
    image: mysql:8.0.41
    container_name: ghcr-application-mysql-dev
    restart: always
    env_file:
      - .env.dev
    volumes:
      - mysql-dev-data:/var/lib/mysql # 持久化数据
    ports:
      - '5175:3306'
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -p$$MYSQL_ROOT_PASSWORD"]
      interval: 15s
      timeout: 10s
      retries: 60
volumes:
  mysql-dev-data: