# 工作流的名称，会显示在GitHub Actions页面
name: 开始构建GHCR镜像

# 触发工作流的条件
# ！！！请在下面的两个选项中，根据您的偏好选择一个，删除另一个 ！！！
on:
  # --- 选项1: 当代码推送到main分支时触发 (适合持续部署) ---
  # push:
  #   branches: [ "main" ]

  # --- 选项2: 当一个 "v*.*.*" 格式的Git标签被推送时触发 (推荐，适合版本化发布) ---
  push:
    tags:
      - "v*.*.*"

# 定义工作流中的任务
jobs:
  build-and-push-fastify:
    # 指定任务运行的虚拟环境
    runs-on: ubuntu-latest

    # 授予工作流所需的权限
    permissions:
      contents: read # 允许读取仓库内容
      packages: write # 允许向GitHub Packages (GHCR) 写入内容
    # 优化：仅当后端目录或工作流文件本身有变化时才运行
    paths:
      - 'ghcr-application-fastify/**'
      - '.github/workflows/ci-cd.yml'
    # 定义任务的执行步骤
    steps:
      # 1. 检出代码
      # 将您的仓库代码下载到虚拟环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 登录到GitHub容器镜像仓库(GHCR)
      # 它会自动使用一个安全的、临时的 GITHUB_TOKEN，您无需配置任何密码！
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # 自动获取您的用户名/组织名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用GitHub自动提供的安全令牌

      # 3. 提取元数据 (自动生成镜像标签)
      # 这是一个非常有用的步骤，它会根据您的Git提交或标签，智能地创建Docker镜像标签
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/ghcr-application-fastify # 镜像名称格式: ghcr.io/仓库名/ghcr-application-fastify

      # 4. 构建并推送到GHCR
      # 这是核心步骤，它会使用您的生产Dockerfile来构建并推送镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ghcr-application-fastify # 指定后端Dockerfile所在目录
          file: ./ghcr-application-fastify/Dockerfile # 明确指定生产Dockerfile
          push: true
          # 使用上一步提取出的元数据作为镜像的标签
          # 例如，如果推送了v1.2.3的Git标签，镜像就会被打上 v1.2.3 和 latest 的标签
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-and-push-vue3:
    # 指定任务运行的虚拟环境
    runs-on: ubuntu-latest

    # 授予工作流所需的权限
    permissions:
      contents: read # 允许读取仓库内容
      packages: write # 允许向GitHub Packages (GHCR) 写入内容
    # 优化：仅当前端目录或工作流文件本身有变化时才运行
    paths:
      - 'ghcr-application-vue3/**'
      - '.github/workflows/ci-cd.yml'
    # 定义任务的执行步骤
    steps:
      # 1. 检出代码
      # 将您的仓库代码下载到虚拟环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 登录到GitHub容器镜像仓库(GHCR)
      # 它会自动使用一个安全的、临时的 GITHUB_TOKEN，您无需配置任何密码！
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # 自动获取您的用户名/组织名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用GitHub自动提供的安全令牌

      # 3. 提取元数据 (自动生成镜像标签)
      # 这是一个非常有用的步骤，它会根据您的Git提交或标签，智能地创建Docker镜像标签
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/ghcr-application-vue3 # 镜像名称格式: ghcr.io/仓库名/ghcr-application-vue3

      # 4. 构建并推送到GHCR
      # 这是核心步骤，它会使用您的生产Dockerfile来构建并推送镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ghcr-application-vue3 # 指定后端Dockerfile所在目录
          file: ./ghcr-application-vue3/Dockerfile # 明确指定生产Dockerfile
          push: true
          # 使用上一步提取出的元数据作为镜像的标签
          # 例如，如果推送了v1.2.3的Git标签，镜像就会被打上 v1.2.3 和 latest 的标签
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  